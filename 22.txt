'use strict';

const JiraApi = require('jira-client');
const Botkit = require('botkit');
const moment = require('moment');
const J2S = require('jira2slack');
const logger = require('./logger')();
const PACKAGE = require('../package');
const request = require('request');
const rp = require('request-promise');
const RESPONSE_FULL = 'full';
const http = require('http');

/**
 * @module Bot
 */
class Bot {
  /**
   * Constructor.
   *
   * @constructor
   * @param {Config} config The final configuration for the bot
   */
  constructor (config) {
    this.config = config;
    /* hold tickets and last time responded to */
    this.ticketBuffer = new Map();

    /* Length of buffer to prevent ticket from being responded to */
    this.TICKET_BUFFER_LENGTH = 300000;

    this.controller = Botkit.slackbot({
      logger
    });

    this.ticketRegExp = new RegExp(config.jira.regex, 'g');
    logger.info(`Ticket Matching Regexp: ${this.ticketRegExp}`);

    this.jira = new JiraApi({
      protocol: config.jira.protocol,
      host: config.jira.host,
      port: config.jira.port,
      username: config.jira.user,
      password: config.jira.pass,
      apiVersion: config.jira.apiVersion,
      strictSSL: config.jira.strictSSL,
      base: config.jira.base
    });


  }

  

 loadMetaOf(boardId,startAt) {
    startAt = startAt || 0
    var deferred = new Promise(function(resolve,reject){
    
    http.get("https://belkdev.atlassian.net/rest/agile/1.0/board/"+boardId+"/sprint?state=closed&startAt="+startAt, function(response) {
        
        var responseBody = "";  // will hold the response body as it comes
        
              
        response.on('end', function() {
            
            var jsonResponse = JSON.parse(responseBody);
                      
            if(jsonResponse.isLast) {
				startAt = startAt + 50;
                loadMetaOf(boardId, startAt)
            }
            else {
                resolve();
            }
        });
    });
    });
    return deferred;
}



  sprintResponse (boardId,message) {
        let self = this;
        let firstcalloptions = {
                uri: "https://belkdev.atlassian.net/rest/agile/1.0/board/"+boardId+"/sprint?state=active",
                headers : {
                                "Authorization" : "Basic =="
                        },
                json: true
        };

        rp(firstcalloptions).promise().bind(self)
        .then(function (body) {
                        let data = body;
                        let allboarddetails = data.values;
                        logger.info(`in first call`);
                        for (let i =0; i < allboarddetails.length; i++){
                                let otherurl = "https://belkdev.atlassian.net/rest/greenhopper/1.0/rapid/charts/sprintreport?rapidViewId="+allboarddetails[i].originBoardId+"&sprintId="+allboarddetails[i].id;
                                logger.info(`contructed otherurl ${otherurl}`);
                                let secondapicalloptions = {
                                                                uri: "https://belkdev.atlassian.net/rest/greenhopper/1.0/rapid/charts/sprintreport?rapidViewId="+allboarddetails[i].originBoardId+"&sprintId="+allboarddetails[i].id,
                                                                headers : {
                                                                                "Authorization" : "Basic "
                                                                        },
                                                                json: true
                                };

                                return rp(secondapicalloptions);

                                       }
        }).then(function (responsebody) {
                let resp = { attachments : []};
                let response = [];
                let sprintdata = responsebody;
                let sprintdetail = {};
                sprintdetail.title = sprintdata.sprint.name
                //sprintdetail.text = "End date:"+ sprintdata.sprint.endDate +"\n Start Date:" + sprintdata.sprint.startDate+
                                //"\n Completed issues:" +sprintdata.contents.completedIssues.length+ "\n
                                //Issues not completed"+sprintdata.contents.issuesNotCompletedInCurrentSprint.length+"\n
                                //Issues added during sprint:"+sprintdata.contents.issueKeysAddedDuringSprint.length+"\n Punted Issues:" + sprintdata.contents.puntedIssues.length ;
                sprintdetail.mrkdwn_in = ["text"];
				sprintdetail.fields = [];
				let issuesaddedDuringSprint = sprintdata.contents.issueKeysAddedDuringSprint;
				let allissues = sprintdata.contents.completedIssues.concat(sprintdata.contents.issuesNotCompletedInCurrentSprint,sprintdata.contents.puntedIssues)
				let allissuesStoryPoints = allissues.filter(function(elm,i){
					if ((elm.key in issuesaddedDuringSprint))
					{
							return false
					}
					return true;
				});

				let storypointCalculateInitial = allissuesStoryPoints.reduce(function(a,b){
					return a+b.estimateStatistic.statFieldValue.value;
				},0);
				sprintdetail.fields.push({
						title: "Initial Story Points:",
						value: storypointCalculateInitial,
					    short: true
				});
				sprintdetail.fields.push({
						title: "Completed Story Points:",
						value: sprintdata.contents.completedIssuesEstimateSum.value,
					    short: true
				});
				sprintdetail.fields.push({
						title: "Start Date:",
						value: sprintdata.sprint.startDate,
						short: true
				});
				sprintdetail.fields.push({
						title: "End date:",
						value: sprintdata.sprint.endDate,
						short: true
				});
				sprintdetail.fields.push({
						title: "Completed issues:",
						value: sprintdata.contents.completedIssues.length,
						short: true
				});
				sprintdetail.fields.push({
						title: "Issues not completed:",
						value: sprintdata.contents.issuesNotCompletedInCurrentSprint.length,
						short: true
				});
				sprintdetail.fields.push({
						title: "Issues added during sprint:",
						value:Object.keys(sprintdata.contents.issueKeysAddedDuringSprint).length,
						short: true
				});
				sprintdetail.fields.push({
						title: "Punted Issues:",
						value: sprintdata.contents.puntedIssues.length,
						short: true
				});
                this.bot.reply(message,"Current Sprint Details:",null);
                response.push(sprintdetail);
                logger.info(`${response}`)
                resp.attachments = response;
                self.bot.reply(message, resp, null);
				let closedSprintUrl = '';
	/*			if(boardId === 266){
						closedSprintUrl = "https://belkdev.atlassian.net/rest/agile/1.0/board/"+boardId+"/sprint?state=closed&startAt=30"
				}else{
						closedSprintUrl = "https://belkdev.atlassian.net/rest/agile/1.0/board/"+boardId+"/sprint?state=closed"
				}
				let thirdapicalloptions = {
												uri: closedSprintUrl ,
												headers : {
																				"Authorization" : "Basic =="
																},
												json: true
						 };

                 return rp(thirdapicalloptions); */
				this.loadMetaOf(boardId, 0,closedSprintrespo);
        }).then(function (closedSprintrespo) {
                let data = closedSprintrespo;
                let allboarddetails = data.values;
                logger.info(`in first call`);
                let i = allboarddetails.length - 1;
				let otherurl = "https://belkdev.atlassian.net/rest/greenhopper/1.0/rapid/charts/sprintreport?rapidViewId="+allboarddetails[i].originBoardId+"&sprintId="+allboarddetails[i].id;
				logger.info(`contructed otherurl ${otherurl}`);
				let secondapicalloptions = {
													uri: "https://belkdev.atlassian.net/rest/greenhopper/1.0/rapid/charts/sprintreport?rapidViewId="+allboarddetails[i].originBoardId+"&sprintId="+allboarddetails[i].id,
													headers : {
																					"Authorization" : "Basic =="
																	},
													json: true
				};

				return rp(secondapicalloptions);



        }).then(function (responsebody) {
                            let lastsprintretro = '';
                                let resp = { attachments : []};
                let response = [];
                let sprintdata = responsebody;
                let sprintdetail = {};
                sprintdetail.title = sprintdata.sprint.name
                //sprintdetail.text = "End date:"+ sprintdata.sprint.endDate +"\n Start Date:" + sprintdata.sprint.startDate+
                                //"\n Completed issues:" +sprintdata.contents.completedIssues.length+ "\n
                                //Issues not completed"+sprintdata.contents.issuesNotCompletedInCurrentSprint.length+"\n
                                //Issues added during sprint:"+sprintdata.contents.issueKeysAddedDuringSprint.length+"\n Punted Issues:" + sprintdata.contents.puntedIssues.length ;
                sprintdetail.mrkdwn_in = ["text"];
				sprintdetail.fields = [];
				let issuesaddedDuringSprint = sprintdata.contents.issueKeysAddedDuringSprint;
				let allissues = sprintdata.contents.completedIssues.concat(sprintdata.contents.issuesNotCompletedInCurrentSprint,sprintdata.contents.puntedIssues)
				let allissuesStoryPoints = allissues.filter(function(elm,i){
					if ((elm.key in issuesaddedDuringSprint))
					{
							return false
					}
					return true;
				});

				let storypointCalculateInitial = allissuesStoryPoints.reduce(function(a,b){
					return a+b.estimateStatistic.statFieldValue.value;
				},0);
				sprintdetail.fields.push({
						title: "Initial Story Points:",
						value: storypointCalculateInitial,
					    short: true
				});
				sprintdetail.fields.push({
						title: "Completed Story Points:",
						value: sprintdata.contents.completedIssuesEstimateSum.value,
					    short: true
				});
				sprintdetail.fields.push({
						title: "Start Date:",
						value: sprintdata.sprint.startDate,
						short: true
				});
				sprintdetail.fields.push({
						title: "End date:",
						value: sprintdata.sprint.endDate,
					    short: true
				});
				sprintdetail.fields.push({
						title: "Completed issues:",
						value: sprintdata.contents.completedIssues.length,
						short: true
				});
				sprintdetail.fields.push({
						title: "Issues not completed:",
						value: sprintdata.contents.issuesNotCompletedInCurrentSprint.length,
						short: true
				});
				sprintdetail.fields.push({
						title: "Issues added during sprint:",
						value:Object.keys(sprintdata.contents.issueKeysAddedDuringSprint).length,
						short: true
				});
				sprintdetail.fields.push({
						title: "Punted Issues:",
						value: sprintdata.contents.puntedIssues.length,
						short: true
				});
                this.bot.reply(message,"Last Sprint Details:",null);
                response.push(sprintdetail);
                logger.info(`${response}`)
                resp.attachments = response;
                self.bot.reply(message, resp, null);
                lastsprintretro = "Sprint Retro :- https://belkdev.atlassian.net/secure/RapidBoard.jspa?rapidView="+boardId+"&view=reporting&chart=sprintRetrospective";
                self.bot.reply(message, lastsprintretro, null);
        }).catch(function (err) {
        // API call failed...
                logger.info(`${err}`)
                self.bot.reply(message, "Unable to get the data"+err, null);
         });


  }



  /**
   * Construct a link to an issue based on the issueKey and config
   *
   * @param {string} issueKey The issueKey for the issue
   * @return {string} The constructed link
   */
  buildIssueLink (issueKey) {
    let base = '/browse/';
    if (this.config.jira.base) {
      // Strip preceeding and trailing forward slash
      base = `/${this.config.jira.base.replace(/^\/|\/$/g, '')}${base}`;
    }
    return `${this.config.jira.protocol}://${this.config.jira.host}:${this.config.jira.port}${base}${issueKey}`;
  }



  /**
   * Parse out JIRA tickets from a message.
   * This will return unique tickets that haven't been
   * responded with recently.
   *
   * @param {string} channel the channel the message came from
   * @param {string} message the message to search in
   * @return {string[]} an array of tickets, empty if none found
   */
  parseMessage (channel, message) {
    let retVal = '';
    let board = '';
    if (!channel || !message) {
      return retVal;
    }
    if (message.indexOf("sprintreview:") !== -1)
    {
                retVal=message.substr(message.indexOf(":")+1)
    }

    return retVal;
  }

  /**
   * Hashes the channel + ticket combo.
   *
   * @param {string} channel The name of the channel
   * @param {string} ticket  The name of the ticket
   * @return {string} The unique hash
   */
  hashTicket (channel, ticket) {
    return `${channel}-${ticket}`;
  }

  /**
   * Remove any tickets from the buffer if they are past the length
   *
   * @return {null} nada
   */
  cleanupTicketBuffer () {
    const now = Date.now();
    logger.debug('Cleaning Ticket Buffer');
    this.ticketBuffer.forEach((time, key) => {
      if (now - time > this.TICKET_BUFFER_LENGTH) {
        logger.debug(`Deleting ${key}`);
        this.ticketBuffer.delete(key);
      }
    });
  }

  /**
   * Function to be called on slack open
   *
   * @param {object} payload Connection payload
   * @return {Bot} returns itself
   */
  slackOpen (payload) {
    const channels = [];
    const groups = [];
    const mpims = [];

    logger.info(`Welcome to Slack. You are @${payload.self.name} of ${payload.team.name}`);

    if (payload.channels) {
      payload.channels.forEach((channel) => {
        if (channel.is_member) {
          channels.push(`#${channel.name}`);
        }
      });

      logger.info(`You are in: ${channels.join(', ')}`);
    }

    if (payload.groups) {
      payload.groups.forEach((group) => {
        groups.push(`${group.name}`);
      });

      logger.info(`Groups: ${groups.join(', ')}`);
    }

    if (payload.mpims) {
      payload.mpims.forEach((mpim) => {
        mpims.push(`${mpim.name}`);
      });

      logger.info(`Multi-person IMs: ${mpims.join(', ')}`);
    }

    return this;
  }

  /**
   * Handle an incoming message
   * @param {object} message The incoming message from Slack
   * @returns {null} nada
   */
  handleMessage (message) {
    const response = {
      as_user: true,
      attachments: []
    };
    let boardId = '';

    if (message.type === 'message' && message.text) {
      const found = this.parseMessage(message.channel, message.text);
      if (found && found.length) {
                logger.info(`Detected ${found}`);
                if (this.config.jira.boards && Object.keys(this.config.jira.boards).length && this.config.jira.boards[""+found+""]) {
                          boardId = this.config.jira.boards[""+found+""];
                          logger.info(`Detected ${boardId}`);
                          this.sprintResponse.call(this,boardId,message);

                } else {
                                                  logger.info(`@${this.bot.identity.name} could not respond.`);
                                                  let errResp = {};
                                                  let availableBoard = "";
                                                  errResp.title = " Please check if you have entered valid board name. Please enter sprintreview:<boardname>. Available boards are : "

                                                                  if (this.config.jira.boards && Object.keys(this.config.jira.boards).length) {
                                                                                Object.keys(this.config.jira.boards).map((board) => {
                                                                                                 availableBoard += board + ",";
                                                                                                 logger.info(`${board}`, response);
                                                                                });
                                                                  }
                                                  errResp.text= availableBoard;
                                                  response.attachments.push(errResp)
                                                  this.bot.reply(message,response,null);
                }
          }
        }
  }

  /**
   * Start the bot
   *
   * @return {Bot} returns itself
   */
  start () {
    this.controller.on(
      'direct_mention,mention,ambient,direct_message',
      (bot, message) => {
        this.handleMessage(message);
      }
    );

    this.controller.on('rtm_close', () => {
      logger.info('The RTM api just closed');

      if (this.config.slack.autoReconnect) {
        this.connect();
      }
    });

    this.connect();

    setInterval(() => {
      this.cleanupTicketBuffer();
    }, 60000);

    return this;
  }

  /**
   * Connect to the RTM
   * @return {Bot} this
   */
  connect () {
    this.bot = this.controller.spawn({
      token: this.config.slack.token,
      retry: this.config.slack.autoReconnect ? Infinity : 0
    }).startRTM((err, bot, payload) => {
      if (err) {
        logger.error('Error starting bot!', err);
      }

      this.slackOpen(payload);
    });

    return this;
  }
}

module.exports = Bot;

